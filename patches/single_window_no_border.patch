diff --git dwm/dwm.c dwm/dwm.c
index 816a75f..024583d 100644
--- dwm/dwm.c
+++ dwm/dwm.c
@@ -1140,7 +1140,7 @@ maprequest(XEvent *e) {
 
 void
 monocle(Monitor *m) {
-	unsigned int n = 0;
+	unsigned int n = 0, r = 0;
 	Client *c;
 
 	for(c = m->clients; c; c = c->next)
@@ -1148,8 +1148,17 @@ monocle(Monitor *m) {
 			n++;
 	if(n > 0) /* override layout symbol */
 		snprintf(m->ltsymbol, sizeof m->ltsymbol, "[%d]", n);
-	for(c = nexttiled(m->clients); c; c = nexttiled(c->next))
-		resize(c, m->wx, m->wy, m->ww - 2 * c->bw, m->wh - 2 * c->bw, False);
+	for(c = nexttiled(m->clients); c; c = nexttiled(c->next)) {
+		/* remove border when in monocle layout */
+		if(c->bw) {
+			c->oldbw = c->bw;
+			c->bw = 0;
+			r = 1;
+		}
+		resize(c, m->wx, m->wy, m->ww - (2 * c->bw), m->wh - (2 * c->bw), False);
+		if(r)
+			resizeclient(c, m->wx, m->wy, m->ww - (2 * c->bw), m->wh - (2 * c->bw));
+	}
 }
 
 void
@@ -1675,7 +1684,7 @@ tagmon(const Arg *arg) {
 
 void
 tile(Monitor *m) {
-	unsigned int i, n, h, mw, my, ty;
+	unsigned int i, n, h, mw, my, ty, r;
 	Client *c;
 
 	for(n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
@@ -1686,17 +1695,36 @@ tile(Monitor *m) {
 		mw = m->nmasters[m->curtag] ? m->ww * m->mfacts[m->curtag] : 0;
 	else
 		mw = m->ww;
-	for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
+	for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++, r = 0) {
+		if(n == 1) {
+			if (c->bw) {
+				/* remove border when only one window is on the current tag */
+				c->oldbw = c->bw;
+				c->bw = 0;
+				r = 1;
+			}
+		}
+		else if(!c->bw && c->oldbw) {
+			/* restore border when more than one window is displayed */
+			c->bw = c->oldbw;
+			c->oldbw = 0;
+			r = 1;
+		}
 		if(i < m->nmasters[m->curtag]) {
 			h = (m->wh - my) / (MIN(n, m->nmasters[m->curtag]) - i);
 			resize(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw), False);
+			if(r)
+				resizeclient(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw));
 			my += HEIGHT(c);
 		}
 		else {
 			h = (m->wh - ty) / (n - i);
 			resize(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw), False);
+			if(r)
+				resizeclient(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw));
 			ty += HEIGHT(c);
 		}
+	}
 }
 
 void
@@ -1718,10 +1746,16 @@ togglefloating(const Arg *arg) {
 		XSetWindowBorder(dpy, selmon->sel->win, scheme[SchemeSel].floatborder->rgb);
 	else
 		XSetWindowBorder(dpy, selmon->sel->win, scheme[SchemeSel].border->rgb);
-	if(selmon->sel->isfloating)
+	if(selmon->sel->isfloating) {
+		/* restore border when moving window into floating mode */
+		if(!selmon->sel->bw && selmon->sel->oldbw) {
+			selmon->sel->bw = selmon->sel->oldbw;
+			selmon->sel->oldbw = 0;
+		}
 		/*restore last known float dimensions*/
 		resize(selmon->sel, selmon->sel->sfx, selmon->sel->sfy,
 		       selmon->sel->sfw, selmon->sel->sfh, False);
+	}
 	else {
 		/*save last known float dimensions*/
 		selmon->sel->sfx = selmon->sel->x;
diff --git a/dwm.c.orig b/dwm.c.orig
index 778b2d8..816a75f 100644
--- a/dwm.c.orig
+++ b/dwm.c.orig
@@ -1140,7 +1140,7 @@ maprequest(XEvent *e) {
 
 void
 monocle(Monitor *m) {
-	unsigned int n = 0, r = 0;
+	unsigned int n = 0;
 	Client *c;
 
 	for(c = m->clients; c; c = c->next)
@@ -1148,17 +1148,8 @@ monocle(Monitor *m) {
 			n++;
 	if(n > 0) /* override layout symbol */
 		snprintf(m->ltsymbol, sizeof m->ltsymbol, "[%d]", n);
-	for(c = nexttiled(m->clients); c; c = nexttiled(c->next)) {
-		/* remove border when in monocle layout */
-		if(c->bw) {
-			c->oldbw = c->bw;
-			c->bw = 0;
-			r = 1;
-		}
-		resize(c, m->wx, m->wy, m->ww - (2 * c->bw), m->wh - (2 * c->bw), False);
-		if(r)
-			resizeclient(c, m->wx, m->wy, m->ww - (2 * c->bw), m->wh - (2 * c->bw));
-	}
+	for(c = nexttiled(m->clients); c; c = nexttiled(c->next))
+		resize(c, m->wx, m->wy, m->ww - 2 * c->bw, m->wh - 2 * c->bw, False);
 }
 
 void
@@ -1684,7 +1675,7 @@ tagmon(const Arg *arg) {
 
 void
 tile(Monitor *m) {
-	unsigned int i, n, h, mw, my, ty, r;
+	unsigned int i, n, h, mw, my, ty;
 	Client *c;
 
 	for(n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
@@ -1727,16 +1718,10 @@ togglefloating(const Arg *arg) {
 		XSetWindowBorder(dpy, selmon->sel->win, scheme[SchemeSel].floatborder->rgb);
 	else
 		XSetWindowBorder(dpy, selmon->sel->win, scheme[SchemeSel].border->rgb);
-	if(selmon->sel->isfloating) {
-		/* restore border when moving window into floating mode */
-		if(!selmon->sel->bw && selmon->sel->oldbw) {
-			selmon->sel->bw = selmon->sel->oldbw;
-			selmon->sel->oldbw = 0;
-		}
+	if(selmon->sel->isfloating)
 		/*restore last known float dimensions*/
 		resize(selmon->sel, selmon->sel->sfx, selmon->sel->sfy,
 		       selmon->sel->sfw, selmon->sel->sfh, False);
-	}
 	else {
 		/*save last known float dimensions*/
 		selmon->sel->sfx = selmon->sel->x;
diff --git a/dwm.c.rej b/dwm.c.rej
index d15420b..852d57e 100644
--- a/dwm.c.rej
+++ b/dwm.c.rej
@@ -1,40 +1,40 @@
---- dwm.c
-+++ dwm.c.orig
-@@ -1693,36 +1684,17 @@ tile(Monitor *m) {
+--- dwm.c.orig
++++ dwm.c
+@@ -1702,17 +1711,36 @@ tile(Monitor *m) {
  		mw = m->nmaster ? m->ww * m->mfact : 0;
  	else
  		mw = m->ww;
--	for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++, r = 0) {
--		if(n == 1) {
--			if (c->bw) {
--				/* remove border when only one window is on the current tag */
--				c->oldbw = c->bw;
--				c->bw = 0;
--				r = 1;
--			}
--		}
--		else if(!c->bw && c->oldbw) {
--			/* restore border when more than one window is displayed */
--			c->bw = c->oldbw;
--			c->oldbw = 0;
--			r = 1;
--		}
-+	for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
+-	for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
++	for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++, r = 0) {
++		if(n == 1) {
++			if (c->bw) {
++				/* remove border when only one window is on the current tag */
++				c->oldbw = c->bw;
++				c->bw = 0;
++				r = 1;
++			}
++		}
++		else if(!c->bw && c->oldbw) {
++			/* restore border when more than one window is displayed */
++			c->bw = c->oldbw;
++			c->oldbw = 0;
++			r = 1;
++		}
  		if(i < m->nmaster) {
  			h = (m->wh - my) / (MIN(n, m->nmaster) - i);
  			resize(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw), False);
--			if(r)
--				resizeclient(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw));
++			if(r)
++				resizeclient(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw));
  			my += HEIGHT(c);
  		}
  		else {
  			h = (m->wh - ty) / (n - i);
  			resize(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw), False);
--			if(r)
--				resizeclient(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw));
++			if(r)
++				resizeclient(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw));
  			ty += HEIGHT(c);
  		}
--	}
++	}
  }
  
  void
